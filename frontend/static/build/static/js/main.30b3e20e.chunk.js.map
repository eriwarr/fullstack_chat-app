{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MessageForm","props","state","messages","handleInput","bind","sendMessage","event","this","setState","target","name","value","currentMessage","message","options","method","headers","Cookies","get","body","JSON","stringify","fetch","then","response","json","onSubmit","className","placeholder","onChange","type","Component","App","data","messageDisplay","map","time","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAEZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBANF,E,+CASnB,SAAYE,GACVC,KAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,yBAGpD,SAAYL,GAIV,IAAMM,EAAiB,CACnBC,QAASN,KAAKN,MAAMC,UAGlBY,EAAU,CACdC,OAAQ,OACNC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUT,IAEzBU,MAAM,gBAAiBR,GACpBS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,Y,oBAE/B,WAEE,OACE,uBAAMC,SAAWnB,KAAKF,YAAtB,UACE,0BAAUsB,UAAU,aAAajB,KAAK,WAAWC,MAAOJ,KAAKN,MAAMC,SAAU0B,YAAY,oBAAoBC,SAAUtB,KAAKJ,cAC5H,wBAAQ2B,KAAK,SAAb,yB,GAtCkBC,aAiFXC,E,kDApCb,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAHI,E,qDAOlB,WAAqB,IAAD,OAClBoB,MAAM,gBACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAU,GAAI,OAAI,EAAKzB,SAAS,CAAEN,SAAU+B,S,oBAG1C,WACE,IAAMC,EAAiB3B,KAAKN,MAAMC,SAASiC,KAAI,SAACtB,GAAD,OAC3C,qBAAIc,UAAU,OAAd,UACE,4BAAId,EAAQA,UACZ,4BAAIA,EAAQuB,SAFYvB,EAAQwB,OAKxC,OACE,qBAAKV,UAAU,MAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qDACA,qBAAKA,UAAU,WAAf,SACGO,IAEH,qBAAKP,UAAU,cAAf,SACE,cAAC,EAAD,e,GA7BQI,aCpCHO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.30b3e20e.chunk.js","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport Cookies from 'js-cookie';\n\nclass MessageForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: '',\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  sendMessage(event) {\n    // event.preventDefault();\n    // this.setState({ messages: '' })\n\n    const currentMessage = {\n        message: this.state.messages,\n    }\n\n    const options = {\n      method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': Cookies.get('csrftoken'),\n        },\n        body: JSON.stringify(currentMessage),\n    }\n    fetch('/api/v1/chat/', options)\n      .then(response => response.json());\n}\n  render() {\n\n    return (\n      <form onSubmit= {this.sendMessage}>\n        <textarea className=\"form-input\" name=\"messages\" value={this.state.messages} placeholder=\"Start your messge\" onChange={this.handleInput}></textarea>\n        <button type=\"submit\">Send</button>\n      </form>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      messages: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('api/v1/chat/')\n    .then(response => response.json())\n    .then(data => this.setState({ messages: data }));\n  }\n\n  render() {\n    const messageDisplay = this.state.messages.map((message) => (\n        <li className=\"list\" key={message.id}>\n          <p>{message.message}</p>\n          <p>{message.time}</p>\n        </li>\n    ))\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>My Awesome Chat App</h1>\n        <div className=\"chat-box\">\n          {messageDisplay}\n        </div>\n        <div className=\"message-box\">\n          <MessageForm/>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}